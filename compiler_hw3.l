/* Definition section */
%{
//#include "common.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
extern int scope;
char buf[256];
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return '+'; }
"-" 	{ return '-'; }
"*" 	{ return '*'; }
"/" 	{ return '/'; }
"%"     { return '%'; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"		{ return MT; }
"<"		{ return LT; }
">="	{ return MTE; }
"<="	{ return LTE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="		{ return '='; }
"+="	{ return ADDASGN; }
"-="	{ return SUBASGN; }
"*="	{ return MULASGN; }
"/="	{ return DIVASGN; }
"%="	{ return MODASGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"		{ return NOT; }

 /* Delimiters */
"("		{ return LB; }
")"		{ return RB; }
"{"		{ scope++;return LCB; }
"}"		{ scope--;return RCB; }
"["		{ return '['; }
"]"		{ return ']'; }
","		{ return COMMA; }

 /* Print Keywords */
"print"		{ return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }
"while"		{ return WHILE; }

 /* Declaration Keywords */
"void"		{ yylval.string="void";return VOID; }
"int"		{ yylval.string="int";return INT; }
"float"  	{ yylval.string="float";return FLOAT; }
"string"  	{ yylval.string="string";return STRING; }
"bool"  	{ yylval.string="bool";return BOOL; }

 /* boolean Keywords */
"true"      { return TRUE; }
"false"     { return FALSE; }

"return"    { return RETURN; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; }
<STRING_STATE>\"		{ BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ yylval.string=strdup(yytext);return STR_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val=atoi(yytext);return I_CONST; }
{double}	{ yylval.f_val=atof(yytext);return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ ; }

 /* Variable ID */
{id}       {yylval.string=strdup(yytext);return ID; }

 /* others */

[;]         { return SEMICOLON; }
[\n]        { }
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     {return 0;}

%%

int yywrap()
{
    return 1;
}
