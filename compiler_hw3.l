/* Definition section */
%{
//#include "common.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
extern int scope;
extern void dump_symbol();

char buf[256];
char str[256];
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1);printf("%s",yytext); }
#define STR {strncat(str, yytext, 256 - strlen(str) - 1);}
#define CLEAR { bzero(buf, sizeof(buf)); }
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; scope++;return LCB; }
"}"		{ CONCAT; dump_symbol();scope--;return RCB; }
"["		{ CONCAT; return '['; }
"]"		{ CONCAT; return ']'; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.string="void";return VOID; }
"int"		{ CONCAT; yylval.string="int";return INT; }
"float"  	{ CONCAT; yylval.string="float";return FLOAT; }
"string"  	{ CONCAT; yylval.string="string";return STRING; }
"bool"  	{ CONCAT; yylval.string="bool";return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; yylval.string=strdup(yytext);return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val=atoi(yytext);return I_CONST; }
{double}	{ CONCAT; yylval.f_val=atof(yytext);return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ CONCAT; printf("%d: ",yylineno+1);}
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; ; }

 /* Variable ID */
{id}       { CONCAT;yylval.string=strdup(yytext);return ID; }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        { CONCAT; printf("%d: ", yylineno+1);CLEAR;}
[ \t]		{ CONCAT;} /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     {printf("\r       ");dump_symbol();return 0;}

%%

int yywrap()
{
    return 1;
}
